# Chapter 4 制御構造と関数
## 制御構造
 実行したり、しなかったり、繰り返したりを制御する構造のこと。
つまり、if, while, for, foreachなどが使える構造のことと考えてよい。

制御構造では、その一つのブロックで一度PHPを抜けHTMLが混じる場合でも処理が継続される。
<?php 
  if (isset($name)) {
    ?>
    <p>hello</p>
    <?php
      echo $name;
  }
?>

こんな書き方もできる
<?php if (isset($name)): ?>
  <p>hello</p>
  <?php echo $name;?>
<?php endif; ?>

## whileとdo while
  whileは先に条件を検討する。do whileは先に処理を行うという違い。


## foreach ($colors as &$color) {
  ・・・
}
こんな参照を用いた処理がかけるが、実際どんな際に参照を用いるのだろうか？？？

## require と require once & include と include once
一度しか読み込む必要のないファイルはonceを、なんども読み込むなら普通のものを
使えばいい。
requireはファイルがなければ、fatal error となりその場で実行が止まる。
includeはファイルがなければ、wargingとなり、処理は続く。

## goto
使う必要のないものと考えて良い。存在を知っている程度でよい。

## 関数の基本
  # 名前空間を定義していない場合、定義された関数はグローバルスコープに定義される。  
  ＝＞衝突が起こりやすい。名前空間を使っていれば問題は起きない。

  # タイプヒンティング
    引数の型を指定できる。
    function array_output (array $array) {
      if (is_array($array)) {
        foreach ($array as $data) {
          echo $data;
        }
      }
    }

  # 関数の呼び出し方
  1. 関数名の後にカッコをつけて呼び出す方法。// array_output($names);
  2. コールバック関数。引数に渡す関数のこと。
    引数に関数を指定すると、特定の処理にその関数を呼び出す関数がある。
    // array_map(func(), array $array);
    array_mapは第二引数の配列一つ一つに第一引数の関数の処理を行うもの。
    もちろん、自作もできる。
  (3. 可変関数　)
  
  # 引数の参照渡し
  function add_one (&$value) {
    return $value++;
  }
  この場合、関数を呼び出す際は、必ず変数を渡さなければならない。
  add_one(2); // fatal error

  # 無名関数 // 名前のない関数。変数に代入したり、コールバック関数としてもちいることができる。
  $array = [
    "hello",
    "<p>world</p>",
    "I'm",
  ];
  $escaped = array_map(function($value) {
    return htmlspecialchars($value, ENT_QUOTES, 'UTF-8');
  }, $array);

  # クロージャー
    参考: http://dqn.sakusakutto.jp/2009/01/javascript.html
    クロージャーの利点
    クロージャを使うと、「状態を保持する関数」を作ることができます。
  
  function outer(){
    $x = 1;
    return function () use (&$x){ // 参照渡しに注意
              echo $x;
              $x = $x + 1;
            };
  }
  $f =  outer(); 
  $f();  // 1
  $f();  // 2
  $f();  // 3